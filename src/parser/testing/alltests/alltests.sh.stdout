using grammar file ../index

file testcases/clear
actual read input:
clear

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'clear',
    args: null,
    condition: null,
    options: null,
    input: 'clear'
  }
]


file testcases/describe
actual read input:
desc a d g

desc


number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'describe',
    args: [ 'a', 'd', 'g' ],
    condition: null,
    options: null,
    input: 'desc a d g'
  },
  {
    command: 'describe',
    args: [],
    condition: null,
    options: null,
    input: 'desc'
  }
]


file testcases/expressions
actual read input:
summ if a & b

summ if a | b

summ if !a

summ if ~a

summ if a != b

summ if a ~= b

summ if a^b == 10

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'summarize',
    args: [],
    condition: 'a & b',
    options: null,
    input: 'summ if a & b'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'a | b',
    options: null,
    input: 'summ if a | b'
  },
  {
    command: 'summarize',
    args: [],
    condition: '~a',
    options: null,
    input: 'summ if !a'
  },
  {
    command: 'summarize',
    args: [],
    condition: '~a',
    options: null,
    input: 'summ if ~a'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'a != b',
    options: null,
    input: 'summ if a != b'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'a != b',
    options: null,
    input: 'summ if a ~= b'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'a**b == 10',
    options: null,
    input: 'summ if a^b == 10'
  }
]


file testcases/official
actual read input:
clear

use "arjun.dta"
use arjun.dta
use arjun
use folder/arjun

use "url.csv"
use "url.xlsx"
use "url.dta"

su
su var1
su var1 var2
su var1 var2 if var3>10

d
d var1
d var1 var2

mean var1
mean var1 var2
mean var1 var2 if var3>10

log using fname
log using "fname.log"
log using fname, replace
log close	
capture log close

gen var1 = 10
gen var1 = var2 + var3
gen var1 = var2 if var3>10

replace var1 = 10
replace var1 = var2 + var3
replace var1 = var2 if var3>10

rename oldname newname

drop v1
drop v1 v2 v3
drop if var1>var2

keep v1
keep v1 v2 v3
keep if var1>var2

tab var1
tab var1 if var3>10
tab var1 var2
tab var1 var2 if var3>10
tab va1, gen(newvarname)

merge 1:1 v1 using fname
merge m:1 v1 using fname
merge 1:m v1 using fname

merge 1:1 v1 v2 v3 using fname
merge m:1 v1 v2 v3 using fname
merge 1:m v1 v2 v3 using fname

reg y x
reg y x1 x2 x3
reg y x1 x2 x3 if x4>10
reg y x1 x2 x3 if x4>10, robust
reg y x1 x3 x3 if x4>10, cluster(var1)

predict newvar
predict newvar, xb
predict newvar, resid

test v1
test v1 v2

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'clear',
    args: null,
    condition: null,
    options: null,
    input: 'clear'
  },
  {
    command: 'use',
    args: [ 'arjun.dta' ],
    condition: null,
    options: null,
    input: 'use "arjun.dta"'
  },
  {
    command: 'use',
    args: [ 'arjun.dta' ],
    condition: null,
    options: null,
    input: 'use arjun.dta'
  },
  {
    command: 'use',
    args: [ 'arjun' ],
    condition: null,
    options: null,
    input: 'use arjun'
  },
  {
    command: 'use',
    args: [ 'folder/arjun' ],
    condition: null,
    options: null,
    input: 'use folder/arjun'
  },
  {
    command: 'use',
    args: [ 'url.csv' ],
    condition: null,
    options: null,
    input: 'use "url.csv"'
  },
  {
    command: 'use',
    args: [ 'url.xlsx' ],
    condition: null,
    options: null,
    input: 'use "url.xlsx"'
  },
  {
    command: 'use',
    args: [ 'url.dta' ],
    condition: null,
    options: null,
    input: 'use "url.dta"'
  },
  {
    command: 'summarize',
    args: [],
    condition: null,
    options: null,
    input: 'su'
  },
  {
    command: 'summarize',
    args: [ 'var1' ],
    condition: null,
    options: null,
    input: 'su var1'
  },
  {
    command: 'summarize',
    args: [ 'var1', 'var2' ],
    condition: null,
    options: null,
    input: 'su var1 var2'
  },
  {
    command: 'summarize',
    args: [ 'var1', 'var2' ],
    condition: 'var3>10',
    options: null,
    input: 'su var1 var2 if var3>10'
  },
  {
    command: 'describe',
    args: [],
    condition: null,
    options: null,
    input: 'd'
  },
  {
    command: 'describe',
    args: [ 'var1' ],
    condition: null,
    options: null,
    input: 'd var1'
  },
  {
    command: 'describe',
    args: [ 'var1', 'var2' ],
    condition: null,
    options: null,
    input: 'd var1 var2'
  },
  {
    command: 'mean',
    args: [ 'var1' ],
    condition: null,
    options: null,
    input: 'mean var1'
  },
  {
    command: 'mean',
    args: [ 'var1', 'var2' ],
    condition: null,
    options: null,
    input: 'mean var1 var2'
  },
  {
    command: 'mean',
    args: [ 'var1', 'var2' ],
    condition: 'var3>10',
    options: null,
    input: 'mean var1 var2 if var3>10'
  },
  {
    command: 'log',
    args: [ 'using', 'fname' ],
    condition: null,
    options: null,
    input: 'log using fname'
  },
  {
    command: 'log',
    args: [ 'using', 'fname.log' ],
    condition: null,
    options: null,
    input: 'log using "fname.log"'
  },
  {
    command: 'log',
    args: [ 'using', 'fname' ],
    condition: null,
    options: [ { option: 'replace', arg: null } ],
    input: 'log using fname, replace'
  },
  {
    command: 'log',
    args: [ 'close' ],
    condition: null,
    options: null,
    input: 'log close'
  },
  {
    command: 'capture log close',
    args: null,
    condition: null,
    options: null,
    input: 'capture log close'
  },
  {
    command: 'generate',
    args: [ 'var1', '10' ],
    condition: null,
    options: null,
    input: 'gen var1 = 10'
  },
  {
    command: 'generate',
    args: [ 'var1', 'var2 + var3' ],
    condition: null,
    options: null,
    input: 'gen var1 = var2 + var3'
  },
  {
    command: 'generate',
    args: [ 'var1', 'var2' ],
    condition: 'var3>10',
    options: null,
    input: 'gen var1 = var2 if var3>10'
  },
  {
    command: 'replace',
    args: [ 'var1', '10' ],
    condition: null,
    options: null,
    input: 'replace var1 = 10'
  },
  {
    command: 'replace',
    args: [ 'var1', 'var2 + var3' ],
    condition: null,
    options: null,
    input: 'replace var1 = var2 + var3'
  },
  {
    command: 'replace',
    args: [ 'var1', 'var2' ],
    condition: 'var3>10',
    options: null,
    input: 'replace var1 = var2 if var3>10'
  },
  {
    command: 'rename',
    args: [ 'oldname', 'newname' ],
    condition: null,
    options: null,
    input: 'rename oldname newname'
  },
  {
    command: 'drop',
    args: [ 'v1' ],
    condition: null,
    options: null,
    input: 'drop v1'
  },
  {
    command: 'drop',
    args: [ 'v1', 'v2', 'v3' ],
    condition: null,
    options: null,
    input: 'drop v1 v2 v3'
  },
  {
    command: 'drop',
    args: null,
    condition: 'var1>var2',
    options: null,
    input: 'drop if var1>var2'
  },
  {
    command: 'keep',
    args: [ 'v1' ],
    condition: null,
    options: null,
    input: 'keep v1'
  },
  {
    command: 'keep',
    args: [ 'v1', 'v2', 'v3' ],
    condition: null,
    options: null,
    input: 'keep v1 v2 v3'
  },
  {
    command: 'keep',
    args: null,
    condition: 'var1>var2',
    options: null,
    input: 'keep if var1>var2'
  },
  {
    command: 'tabulate',
    args: [ 'var1' ],
    condition: null,
    options: null,
    input: 'tab var1'
  },
  {
    command: 'tabulate',
    args: [ 'var1' ],
    condition: 'var3>10',
    options: null,
    input: 'tab var1 if var3>10'
  },
  {
    command: 'tabulate',
    args: [ 'var1', 'var2' ],
    condition: null,
    options: null,
    input: 'tab var1 var2'
  },
  {
    command: 'tabulate',
    args: [ 'var1', 'var2' ],
    condition: 'var3>10',
    options: null,
    input: 'tab var1 var2 if var3>10'
  },
  {
    command: 'tabulate',
    args: [ 'va1' ],
    condition: null,
    options: [ { option: 'gen', arg: 'newvarname' } ],
    input: 'tab va1, gen(newvarname)'
  },
  {
    command: 'merge',
    args: [ '1:1', [ 'v1' ], 'fname' ],
    condition: null,
    options: null,
    input: 'merge 1:1 v1 using fname'
  },
  {
    command: 'merge',
    args: [ 'm:1', [ 'v1' ], 'fname' ],
    condition: null,
    options: null,
    input: 'merge m:1 v1 using fname'
  },
  {
    command: 'merge',
    args: [ '1:m', [ 'v1' ], 'fname' ],
    condition: null,
    options: null,
    input: 'merge 1:m v1 using fname'
  },
  {
    command: 'merge',
    args: [ '1:1', [ 'v1', 'v2', 'v3' ], 'fname' ],
    condition: null,
    options: null,
    input: 'merge 1:1 v1 v2 v3 using fname'
  },
  {
    command: 'merge',
    args: [ 'm:1', [ 'v1', 'v2', 'v3' ], 'fname' ],
    condition: null,
    options: null,
    input: 'merge m:1 v1 v2 v3 using fname'
  },
  {
    command: 'merge',
    args: [ '1:m', [ 'v1', 'v2', 'v3' ], 'fname' ],
    condition: null,
    options: null,
    input: 'merge 1:m v1 v2 v3 using fname'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x' ] ],
    condition: null,
    options: null,
    input: 'reg y x'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x1', 'x2', 'x3' ] ],
    condition: null,
    options: null,
    input: 'reg y x1 x2 x3'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x1', 'x2', 'x3' ] ],
    condition: 'x4>10',
    options: null,
    input: 'reg y x1 x2 x3 if x4>10'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x1', 'x2', 'x3' ] ],
    condition: 'x4>10',
    options: [ { option: 'robust', arg: null } ],
    input: 'reg y x1 x2 x3 if x4>10, robust'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x1', 'x3', 'x3' ] ],
    condition: 'x4>10',
    options: [ { option: 'cluster', arg: 'var1' } ],
    input: 'reg y x1 x3 x3 if x4>10, cluster(var1)'
  },
  {
    command: 'predict',
    args: 'newvar',
    condition: null,
    options: null,
    input: 'predict newvar'
  },
  {
    command: 'predict',
    args: [ 'newvar' ],
    condition: null,
    options: [ { option: 'xb', arg: null } ],
    input: 'predict newvar, xb'
  },
  {
    command: 'predict',
    args: [ 'newvar' ],
    condition: null,
    options: [ { option: 'resid', arg: null } ],
    input: 'predict newvar, resid'
  },
  {
    command: 'test',
    args: [ 'v1' ],
    condition: null,
    options: null,
    input: 'test v1'
  },
  {
    command: 'test',
    args: [ 'v1', 'v2' ],
    condition: null,
    options: null,
    input: 'test v1 v2'
  }
]


file testcases/regression
actual read input:
reg y x

reg y x if income > 100

reg y x1 x2 x3

reg y x2 x3 if x2 < 7 & x3 < 5

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'regress',
    args: [ 'y', [ 'x' ] ],
    condition: null,
    options: null,
    input: 'reg y x'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x' ] ],
    condition: 'income > 100',
    options: null,
    input: 'reg y x if income > 100'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x1', 'x2', 'x3' ] ],
    condition: null,
    options: null,
    input: 'reg y x1 x2 x3'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x2', 'x3' ] ],
    condition: 'x2 < 7 & x3 < 5',
    options: null,
    input: 'reg y x2 x3 if x2 < 7 & x3 < 5'
  }
]


file testcases/summarize
actual read input:
summ a

summ if hi

summarize

summ a b c if x

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'summarize',
    args: [ 'a' ],
    condition: null,
    options: null,
    input: 'summ a'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'hi',
    options: null,
    input: 'summ if hi'
  },
  {
    command: 'summarize',
    args: [],
    condition: null,
    options: null,
    input: 'summarize'
  },
  {
    command: 'summarize',
    args: [ 'a', 'b', 'c' ],
    condition: 'x',
    options: null,
    input: 'summ a b c if x'
  }
]


file testcases/test1
actual read input:
clear
use https://github.com/arjunsrini/open-stata-data/blob/master/cpsmar08_10pct.dta?raw=true
desc
summ
mean age
gen age2 = age^2
mean age age2
reg wage_hr hhid age age2

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'clear',
    args: null,
    condition: null,
    options: null,
    input: 'clear'
  },
  {
    command: 'use',
    args: [
      'https://github.com/arjunsrini/open-stata-data/blob/master/cpsmar08_10pct.dta?raw=true'
    ],
    condition: null,
    options: null,
    input: 'use https://github.com/arjunsrini/open-stata-data/blob/master/cpsmar08_10pct.dta?raw=true'
  },
  {
    command: 'describe',
    args: [],
    condition: null,
    options: null,
    input: 'desc'
  },
  {
    command: 'summarize',
    args: [],
    condition: null,
    options: null,
    input: 'summ'
  },
  {
    command: 'mean',
    args: [ 'age' ],
    condition: null,
    options: null,
    input: 'mean age'
  },
  {
    command: 'generate',
    args: [ 'age2', 'age**2' ],
    condition: null,
    options: null,
    input: 'gen age2 = age^2'
  },
  {
    command: 'mean',
    args: [ 'age', 'age2' ],
    condition: null,
    options: null,
    input: 'mean age age2'
  },
  {
    command: 'regress',
    args: [ 'wage_hr', [ 'hhid', 'age', 'age2' ] ],
    condition: null,
    options: null,
    input: 'reg wage_hr hhid age age2'
  }
]


file testcases/test2
actual read input:
clear
use https://github.com/arjunsrini/open-stata-data/blob/master/cpsmar08_10pct.dta?raw=true
summ
mean age
gen age2 = age^2
mean age age2
reg wage_hr hhid age age2
rename age2 age_squared
mean age_squared
keep age age_squared
summ
drop age_sqaured
mean age_squared

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'clear',
    args: null,
    condition: null,
    options: null,
    input: 'clear'
  },
  {
    command: 'use',
    args: [
      'https://github.com/arjunsrini/open-stata-data/blob/master/cpsmar08_10pct.dta?raw=true'
    ],
    condition: null,
    options: null,
    input: 'use https://github.com/arjunsrini/open-stata-data/blob/master/cpsmar08_10pct.dta?raw=true'
  },
  {
    command: 'summarize',
    args: [],
    condition: null,
    options: null,
    input: 'summ'
  },
  {
    command: 'mean',
    args: [ 'age' ],
    condition: null,
    options: null,
    input: 'mean age'
  },
  {
    command: 'generate',
    args: [ 'age2', 'age**2' ],
    condition: null,
    options: null,
    input: 'gen age2 = age^2'
  },
  {
    command: 'mean',
    args: [ 'age', 'age2' ],
    condition: null,
    options: null,
    input: 'mean age age2'
  },
  {
    command: 'regress',
    args: [ 'wage_hr', [ 'hhid', 'age', 'age2' ] ],
    condition: null,
    options: null,
    input: 'reg wage_hr hhid age age2'
  },
  {
    command: 'rename',
    args: [ 'age2', 'age_squared' ],
    condition: null,
    options: null,
    input: 'rename age2 age_squared'
  },
  {
    command: 'mean',
    args: [ 'age_squared' ],
    condition: null,
    options: null,
    input: 'mean age_squared'
  },
  {
    command: 'keep',
    args: [ 'age', 'age_squared' ],
    condition: null,
    options: null,
    input: 'keep age age_squared'
  },
  {
    command: 'summarize',
    args: [],
    condition: null,
    options: null,
    input: 'summ'
  },
  {
    command: 'drop',
    args: [ 'age_sqaured' ],
    condition: null,
    options: null,
    input: 'drop age_sqaured'
  },
  {
    command: 'mean',
    args: [ 'age_squared' ],
    condition: null,
    options: null,
    input: 'mean age_squared'
  }
]


file testcases/use
actual read input:
use some_url

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'use',
    args: [ 'some_url' ],
    condition: null,
    options: null,
    input: 'use some_url'
  }
]


file testcases/weirdwhitespace
actual read input:
  

   

                    
  reg y t1 t2 if salary >= 100     

  

   
    

 

   
  reg y x s         
        
                              reg income age parental_income           
          

     
 

     

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'regress',
    args: [ 'y', [ 't1', 't2' ] ],
    condition: 'salary >= 100',
    options: null,
    input: 'reg y t1 t2 if salary >= 100'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x', 's' ] ],
    condition: null,
    options: null,
    input: 'reg y x s'
  },
  {
    command: 'regress',
    args: [ 'income', [ 'age', 'parental_income' ] ],
    condition: null,
    options: null,
    input: 'reg income age parental_income'
  }
]

