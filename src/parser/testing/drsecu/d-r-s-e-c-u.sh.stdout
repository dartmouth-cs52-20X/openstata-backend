using grammar file ../index

file testcases/describe
actual read input:
desc a d g

desc


number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'describe',
    args: [ 'a', 'd', 'g' ],
    condition: null,
    options: null,
    input: 'desc a d g'
  },
  {
    command: 'describe',
    args: [],
    condition: null,
    options: null,
    input: 'desc'
  }
]


file testcases/expressions
actual read input:
summ if a & b

summ if a | b

summ if !a

summ if ~a

summ if a != b

summ if a ~= b

summ if a^b == 10

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'summarize',
    args: [],
    condition: 'a & b',
    options: null,
    input: 'summ if a & b'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'a | b',
    options: null,
    input: 'summ if a | b'
  },
  {
    command: 'summarize',
    args: [],
    condition: '~a',
    options: null,
    input: 'summ if !a'
  },
  {
    command: 'summarize',
    args: [],
    condition: '~a',
    options: null,
    input: 'summ if ~a'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'a != b',
    options: null,
    input: 'summ if a != b'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'a != b',
    options: null,
    input: 'summ if a ~= b'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'a**b == 10',
    options: null,
    input: 'summ if a^b == 10'
  }
]


file testcases/regression
actual read input:
reg y x

reg y x if income > 100

reg y x1 x2 x3

reg y x2 x3 if x2 < 7 & x3 < 5

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'regress',
    args: [ 'y', [ 'x' ] ],
    condition: null,
    options: null,
    input: 'reg y x'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x' ] ],
    condition: 'income > 100',
    options: null,
    input: 'reg y x if income > 100'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x1', 'x2', 'x3' ] ],
    condition: null,
    options: null,
    input: 'reg y x1 x2 x3'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x2', 'x3' ] ],
    condition: 'x2 < 7 & x3 < 5',
    options: null,
    input: 'reg y x2 x3 if x2 < 7 & x3 < 5'
  }
]


file testcases/summarize
actual read input:
summ a

summ if hi

summarize

summ a b c if x

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'summarize',
    args: [ 'a' ],
    condition: null,
    options: null,
    input: 'summ a'
  },
  {
    command: 'summarize',
    args: [],
    condition: 'hi',
    options: null,
    input: 'summ if hi'
  },
  {
    command: 'summarize',
    args: [],
    condition: null,
    options: null,
    input: 'summarize'
  },
  {
    command: 'summarize',
    args: [ 'a', 'b', 'c' ],
    condition: 'x',
    options: null,
    input: 'summ a b c if x'
  }
]


file testcases/weirdwhitespace
actual read input:
  

   

                    
  reg y t1 t2 if salary >= 100     

  

   
    

 

   
  reg y x s         
        
                              reg income age parental_income           
          

     
 

     

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'regress',
    args: [ 'y', [ 't1', 't2' ] ],
    condition: 'salary >= 100',
    options: null,
    input: 'reg y t1 t2 if salary >= 100'
  },
  {
    command: 'regress',
    args: [ 'y', [ 'x', 's' ] ],
    condition: null,
    options: null,
    input: 'reg y x s'
  },
  {
    command: 'regress',
    args: [ 'income', [ 'age', 'parental_income' ] ],
    condition: null,
    options: null,
    input: 'reg income age parental_income'
  }
]


file testcases/use
actual read input:
use some_url

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'use',
    args: [ 'some_url' ],
    condition: null,
    options: null,
    input: 'use some_url'
  }
]


file testcases/clear
actual read input:
clear

number of results: 1
parsed AST with regenerated inputs
[
  {
    command: 'clear',
    args: null,
    condition: null,
    options: null,
    input: 'clear'
  }
]

